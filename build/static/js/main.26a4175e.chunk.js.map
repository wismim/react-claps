{"version":3,"sources":["components/Claps.js","App.js","serviceWorker.js","index.js"],"names":["mojs","require","Claps","props","state","count","countTotal","_generateRandomNumber","isClicked","_handleClick","bind","triangleBurst","Burst","parent","radius","50","angle","children","shape","6","scale","stroke","strokeWidth","delay","speed","easing","bezier","duration","circleBurst","fill","3","countAnimation","Html","el","isShowStart","isShowEnd","y","0","opacity","then","1","tlDuration","countTotalAnimation","scaleButton","1.3","out","document","getElementById","style","transform","this","_animationTimeline","Timeline","add","min","max","Math","floor","random","replay","setState","prevState","nextState","handleClick","id","className","onClick","xmlns","viewBox","d","getAppContent","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26a4175e.chunk.js","sourcesContent":["import React from 'react';\nimport './claps.css';\nconst mojs = require('mo-js');\n\nclass Claps extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n      countTotal: this._generateRandomNumber(500,10000),\n      isClicked: false,\n    }\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const tlDuration = 300\n    const triangleBurst = new mojs.Burst({\n      parent: '#clap',\n      radius: {50:95},\n      count: 5,\n      angle: 30,\n      children: {\n        shape: 'polygon',\n        radius: {6: 0},\n        scale: 1,\n        stroke: 'rgba(211,84,0 ,0.5)',\n        strokeWidth: 2,\n        angle: 210,\n        delay: 30,\n        speed: 0.2,\n        easing: mojs.easing.bezier(0.1, 1, 0.3 ,1),\n        duration: tlDuration\n      } \n    })\n    const circleBurst = new mojs.Burst({\n      parent: '#clap',\n      radius: {50:75},\n      angle: 25,\n      duration: tlDuration,\n      children: {\n        shape: 'circle',\n        fill: 'rgba(149,165,166 ,0.5)',\n        delay: 30,\n        speed: 0.2,\n        radius: {3: 0},\n        easing: mojs.easing.bezier(0.1, 1, 0.3, 1),\n      }\n    })\n    const countAnimation = new mojs.Html({\n      el: '#clap--count',\n      isShowStart: false,\n      isShowEnd: true,\n      y: {0: -30},\n      opacity: {0:1},\n      duration: tlDuration\n    }).then({\n      opacity: {1:0},\n      y: -80,\n      delay: tlDuration/2\n    })\n    const countTotalAnimation = new mojs.Html({\n      el: '#clap--count-total',\n      isShowStart: false,\n      isShowEnd: true,\n      opacity: {0:1},\n      delay: 3*(tlDuration)/2,\n      duration: tlDuration,\n      y: {0: -3}\n    })\n    const scaleButton = new mojs.Html({\n      el: '#clap',\n      duration: tlDuration,\n      scale: {1.3: 1},\n      easing: mojs.easing.out\n    })\n    const clap = document.getElementById('clap')\n    clap.style.transform = \"scale(1, 1)\"\n    this._animationTimeline = new mojs.Timeline()\n    this._animationTimeline.add([\n      countAnimation,\n      countTotalAnimation,\n      scaleButton,\n      circleBurst,\n      triangleBurst\n    ])\n  }\n  _generateRandomNumber (min, max) {\n    return Math.floor(Math.random()*(max-min+1)+min)\n  } \n\n  \n  _handleClick () {\n    this._animationTimeline.replay()\n    this.setState(function(prevState, nextState) {\n      return {\n        count: Math.min(prevState.count + 1, 50),\n        countTotal: prevState.countTotal + 1,\n        isClicked: true\n      }\n    })\n  }\n  \n  render() {\n    const {count, countTotal, isClicked} = this.state;\n    return getAppContent(count, countTotal, isClicked, this._handleClick)\n  }\n}\n\nfunction getAppContent(count, countTotal, isClicked, handleClick) {\n  return <div><button id=\"clap\" className=\"clap\" onClick={handleClick}>\n  <span>\n    {/*<!--  SVG Created by Luis Durazo from the Noun Project  -->*/}\n    <svg id=\"clap--icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-549 338 100.1 125\" className={`${isClicked && 'checked'}`}>\n  <path d=\"M-471.2 366.8c1.2 1.1 1.9 2.6 2.3 4.1.4-.3.8-.5 1.2-.7 1-1.9.7-4.3-1-5.9-2-1.9-5.2-1.9-7.2.1l-.2.2c1.8.1 3.6.9 4.9 2.2zm-28.8 14c.4.9.7 1.9.8 3.1l16.5-16.9c.6-.6 1.4-1.1 2.1-1.5 1-1.9.7-4.4-.9-6-2-1.9-5.2-1.9-7.2.1l-15.5 15.9c2.3 2.2 3.1 3 4.2 5.3zm-38.9 39.7c-.1-8.9 3.2-17.2 9.4-23.6l18.6-19c.7-2 .5-4.1-.1-5.3-.8-1.8-1.3-2.3-3.6-4.5l-20.9 21.4c-10.6 10.8-11.2 27.6-2.3 39.3-.6-2.6-1-5.4-1.1-8.3z\"/>\n  <path d=\"M-527.2 399.1l20.9-21.4c2.2 2.2 2.7 2.6 3.5 4.5.8 1.8 1 5.4-1.6 8l-11.8 12.2c-.5.5-.4 1.2 0 1.7.5.5 1.2.5 1.7 0l34-35c1.9-2 5.2-2.1 7.2-.1 2 1.9 2 5.2.1 7.2l-24.7 25.3c-.5.5-.4 1.2 0 1.7.5.5 1.2.5 1.7 0l28.5-29.3c2-2 5.2-2 7.1-.1 2 1.9 2 5.1.1 7.1l-28.5 29.3c-.5.5-.4 1.2 0 1.7.5.5 1.2.4 1.7 0l24.7-25.3c1.9-2 5.1-2.1 7.1-.1 2 1.9 2 5.2.1 7.2l-24.7 25.3c-.5.5-.4 1.2 0 1.7.5.5 1.2.5 1.7 0l14.6-15c2-2 5.2-2 7.2-.1 2 2 2.1 5.2.1 7.2l-27.6 28.4c-11.6 11.9-30.6 12.2-42.5.6-12-11.7-12.2-30.8-.6-42.7m18.1-48.4l-.7 4.9-2.2-4.4m7.6.9l-3.7 3.4 1.2-4.8m5.5 4.7l-4.8 1.6 3.1-3.9\"/>\n</svg>\n  </span>\n  <span\n    id=\"clap--count\" className=\"clap--count\">+{count}</span>\n    \n  <span\n    id=\"clap--count-total\" className=\"clap--count-total\">{countTotal}</span>\n</button>\n  </div>\n}\n\nexport default Claps;","import React from 'react';\nimport Claps from './components/Claps'\n\nfunction App() {\n  return (\n        <Claps />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}